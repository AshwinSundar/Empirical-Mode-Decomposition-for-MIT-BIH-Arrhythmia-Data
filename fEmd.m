% Issues
% FIXED 1) Running average of modes in switch cases is not correct.
% DONE 2) Implement extra cases
% DONE 3) Change the .csv file naming to
% "AverageMode[ArrhythmiaType][ModeNumber].csv" so it sorts better in
% directory
% SKIP 4) Remove the underscore
% DONE 5) Move str2num after .csv in mode file naming convention
% FIXED 6) Figure out why arrhythmias starting with '(' aren't reading correctly.
% probably same reason as in fEmd
% 7) Make it so you can read the whole arrhythmia range in one go, instead
% of for every single record
% DONE 8) Something's wrong with the naming in mitdb100. Fix it, and then check
% all the other folders as well
% DONE 9) Test averaging function using simple functions
% DONE 10) Confirm that dlmwrites are working properly
% DONE 11) Review emd.m for inconsistencies and abnormalities

function fEmd
WD = cd; % saves the directory you are currently in, so we can navigate back later
sOriginalDir = WD; % extra step because of an idiosyncracy with saving the working directory in matlab
format long e; % increase decimal precision
sfileName = 'PhysioBank Records.xlsx';
sFolderPrefix = 'mitdb';
sDelimiter = ',';
iRowOffset = 0;
iColOffset = 0;
sPrecision = '%.3f';
iTracker = 1; % Tracks which arrhythmia we are on. Implemented in a way so I can just read all the arrhythmias in one go.
% I'll confirm it worked by printing out iTracker at the end of every
% record - should match up with end of record in Excel row minus 1

% get the file numbers
fprintf('Select range of file numbers\n'); % prompt for xlsread
[aFileNumbers, ~, ~] = xlsread(sfileName, -1);
aFileNumbers = aFileNumbers(isfinite(aFileNumbers(:,1)),:); % removes any NaNs

% identify which type of arrhythmia it is
fprintf('Select range of ALL arrhythmia abbreviations\n'); % prompt for xlsread
[~, aArrhythmiaTypes, ~] = xlsread(sfileName, -1); % gets the arrhythmia abbreviation, stores it in a cell array
aArrhythmiaTypes = char(aArrhythmiaTypes); % convert to chars
aArrhythmiaTypes = aArrhythmiaTypes(isfinite(aArrhythmiaTypes(:,1)),:); % removes any NaNs

tic
% iterate through each file
for j = 1:length(aFileNumbers) % go through all the files
    % navigate to the directory containing the arrhythmia window file
    sCurrentFolder = strcat(sFolderPrefix, num2str(aFileNumbers(j)));
    cd(sOriginalDir);
    cd(sCurrentFolder);
    
    tFiles = dir('*.csv'); % gets all files in curent directory, puts info in a struct (t)
    iNumFiles = length(tFiles); % number of files in current directory
    
    for i = 1:iNumFiles % iterate through each arrythmia window
        sArrFileName = getfield(tFiles(i), 'name'); % gets the file name
        fprintf(strcat('Currently processing: ', sArrFileName, '\n'));
        
        % get the data set from the windowed csvs
        aArrWindow = csvread(sArrFileName);
        
        % decompose into empirical modes. emd function exists in original
        % directory, so go back there first.
        cd(sOriginalDir);
        aModes = emd(aArrWindow(:, 2));
        
        % save the specific modes generated by each window as well
        cd(sCurrentFolder);
        sNextFolder = strcat(sCurrentFolder, '_', num2str(i), 'modes');
        mkdir(sNextFolder);
        cd(sNextFolder);
        dlmwrite(strcat(sNextFolder, '.csv'), aModes, 'delimiter', sDelimiter, 'roffset', iRowOffset, 'coffset', iColOffset, 'precision', sPrecision);
        cd(sOriginalDir); % go back to original because we want to merge modes across data sets next
        
        iNumModes = length(aModes(:,1)); % number of modes generated by the current window
        
        % figure out what kind of arrhythmia the modes came from
        % I didn't have to use switch-case here - I could just put
        % aArrhythmiaTypes(i,:) in the strcat itself. Would make this easier to debug too.
        % I guess the good thing is switch-case gives me more options in
        % the future - if i ever want to process each arrhythmia
        % differently (different size windows, for example),
        % i could easily do that here.
        for k = 1:iNumModes
            switch (deblank(aArrhythmiaTypes(iTracker,:))) % figure out what kind of beat you're looking at. deblank removes trailing spaces
                case 'A' % Atrial Premature Beat
                    sModeFile = strcat('AverageMode', '_A', num2str(k), '.csv');
                case 'V' % Premature Ventricular Contraction
                    sModeFile = strcat('AverageMode', '_V', num2str(k), '.csv');
                case 'N' % Normal Beat
                    sModeFile = strcat('AverageMode', '_N', num2str(k), '.csv');
                case '(NOD' % Nodal (A-V junctional) Rhythm
                    sModeFile = strcat('AverageMode', '_(NOD', num2str(k), '.csv');
                case '(B' % Ventricular Bigeminy
                    sModeFile = strcat('AverageMode', '_(B', num2str(k), '.csv');
                case '(T' % Ventricular Trigeminy
                    sModeFile = strcat('AverageMode', '_(T', num2str(k), '.csv');
                case '(VT' % Ventricular Tachycardia
                    sModeFile = strcat('AverageMode', '_(VT', num2str(k), '.csv');
                case 'F' % Fusion of ventricular and normal beat
                    sModeFile = strcat('AverageMode', '_F', num2str(k), '.csv');
                case 'x' % Non-conducted P-wave (Blocked APB)
                    sModeFile = strcat('AverageMode', '_x', num2str(k), '.csv');
                case 'L' % Left bundle branch block beat
                    sModeFile = strcat('AverageMode', '_L', num2str(k), '.csv');
                case 'a' % Aberrated atrial premature beat
                    sModeFile = strcat('AverageMode', '_a', num2str(k), '.csv');
                case 'J' % Nodal (junctional) premature beat
                    sModeFile = strcat('AverageMode', '_J', num2str(k), '.csv');
                case '(SVTA' % Supraventricular tachyarrhythmia
                    sModeFile = strcat('AverageMode', '_(SVTA', num2str(k), '.csv');
                case 'R' % Right bundle branch block beat
                    sModeFile = strcat('AverageMode', '_R', num2str(k), '.csv');
                case 'j' % Nodal (junctional) escape beat
                    sModeFile = strcat('AverageMode', '_j', num2str(k), '.csv');
                case '(IVR' % Idioventricular rhythm
                    sModeFile = strcat('AverageMode', '_(IVR', num2str(k), '.csv');
                case '(AFIB' % Atrial fibrillation
                    sModeFile = strcat('AverageMode', '_(AFIB', num2str(k), '.csv');
                case '(AFL' % Atrial flutter
                    sModeFile = strcat('AverageMode', '_(AFL', num2str(k), '.csv');
                case '!' % Ventricular flutter wave
                    sModeFile = strcat('AverageMode', '_!', num2str(k), '.csv');
                case 'E' % Ventricular escape beat
                    sModeFile = strcat('AverageMode', '_E', num2str(k), '.csv');
                case '(VFL' % Ventricular flutter
                    sModeFile = strcat('AverageMode', '_(VFL', num2str(k), '.csv');
                case 'S' % Supraventricular premature beat
                    sModeFile = strcat('AverageMode', '_S', num2str(k), '.csv');
                case '(AB' % Atrial bigeminy
                    sModeFile = strcat('AverageMode', '_(AB', num2str(k), '.csv');
                case 'e' % Atrial escape beat
                    sModeFile = strcat('AverageMode', '_e', num2str(k), '.csv');
                case '(BII' % Atrial escape beat
                    sModeFile = strcat('AverageMode', '_(BII', num2str(k), '.csv');
                otherwise
                    disp(strcat('Arrhythmia type ', aArrhythmiaTypes(iTracker,:), ' has not been accounted for. Please add a case in fEmd.\n'));
            end
            
            % is there a file containing the average modes yet?
            if(exist(sModeFile, 'file'));
                % if so average with existing data
                aAverageMode = csvread(sModeFile, iRowOffset, iColOffset, 'A1..BU1'); % this assumes the data set is exactly 73 points. Might be a good idea to make this dynamic. Would need to replace 73 in the next line as well
                iNumOfAverages = csvread(sModeFile, iRowOffset, 73) + 1; % number of modes contributing to the average, add 1 because we're adding a new mode
                aNewAverageMode = aAverageMode*(iNumOfAverages - 1)/(iNumOfAverages) + aModes(k,:)*(1/iNumOfAverages); % you need to weight the new mode appropriately, not just dump it in
                dlmwrite(sModeFile, [aNewAverageMode iNumOfAverages], 'delimiter', sDelimiter, 'roffset', iRowOffset, 'coffset', iColOffset, 'precision', sPrecision);
                % dlmwrite(sModeFile, iNumOfAverages + 1, 'delimiter', sDelimiter, 'roffset', 1, 'coffset', iColOffset, 'precision', sPrecision);
            else
                % if not create a new file and just dump the mode in
                aNewAverageMode = aModes(k,:);
                dlmwrite(sModeFile, [aNewAverageMode 1], 'delimiter', sDelimiter, 'roffset', iRowOffset, 'coffset', iColOffset, 'precision', sPrecision);
            end
        end
        
        cd(sCurrentFolder); % this might be unnecessary
        iTracker = iTracker + 1; % increments the tracker for arrhythmia type
    end
    fprintf(strcat(sCurrentFolder, ' ends on row ', num2str(iTracker), '\n'));
end

% return to the original directory you started in
cd(sOriginalDir);
toc
end